{
  let is_same_line prev token token_start =
    match token with
    | Grammar.EOF _ -> false
    | _ -> prev.Lexing.pos_lnum = token_start.Lexing.pos_lnum
}

rule error_message = parse error

(* Match `expr() =` in tables: probably wanted `[expr()] = ...` *)
| [_ / table_entry: expr . ...] @ EQUALS
  { Error.Table_key_equals (token, $startloc(token), $endloc(token)) }

(* Match `expr() = ` in any other context: probably wanted `expr() == `. *)
| [expr] @ EQUALS
  { Error.Use_double_equals (token, $startloc(token), $endloc(token)) }

(* Suggest a missing comma in table entries. *)
| last = [_ / table_body: table_entry . ...] @ STRING, NUMBER, TRUE, FALSE, NIL, OSQUARE, OPAREN, IDENT
  {
    let token = (token, $startloc(token), $endloc(token)) in
    Missing_table_comma { comma_pos = $endloc(last); token }
  }

(* Suggest removing a comma in function calls. *)
| (_ / call_args: OPAREN . ...);
  (expr | COMMA)* ;
  (comma = COMMA / sep_list1(COMMA,expr): expr COMMA . sep_list1(COMMA,expr) ...)
  @ CPAREN
  {
    Trailing_call_comma {
      comma = (comma, $startloc(comma), $endloc(comma));
      token = (token, $startloc(token), $endloc(token))
    }
  }

(* Unclosed parentheses. *)
| open_ = OPAREN; [_ / ... . CPAREN]
| open_ = OBRACE; [_ / ... . CBRACE]
| open_ = OSQUARE; [_ / ... . CSQUARE]
  {
    Unclosed_brackets {
      open_ = (open_, $startloc(open_), $endloc(open_));
      token = (token, $startloc(token), $endloc(token))
    }
  }
| start = DOUBLE_COLON; [_ / stmt: DOUBLE_COLON ident . DOUBLE_COLON]
  {
    Unfinished_label {
      start = (start, $startloc(start), $endloc(start));
      token = (token, $startloc(token), $endloc(token))
    }
  }

(* `local function x.f() end` *)
| local = LOCAL; FUNCTION; [var] @ DOT
  {
    Local_function_dot {
      local = (local, $startloc(local), $endloc(local));
      token = (token, $startloc(token), $endloc(token))
    }
  }

(* An `if`/`elseif` statement with a missing `then`. *)
| (if_ = IF | if_ = ELSEIF); expr = [expr]
  {
    let pos =
      if is_same_line $endloc(expr) token $startloc(token) then ($startloc(token), $endloc(token))
      else ($endloc(expr), $endloc(expr))
    in
    Expected_then {
      if_ = (if_, $startloc(if_), $endloc(if_));
      pos
    }
  }

(* Statements with a missing `end`. *)
| (start = IF | start = ELSEIF) ; expr ; THEN; [stmts]
| start = ELSE ; [stmts]
| start = WHILE ; expr ; DO; [stmts]
| (start = DO / stmt: DO . ...) ; [stmts]
| (start = FOR / stmt: FOR . ...) ; sep_list1(COMMA,var) ; IN ; sep_list1(COMMA,expr) ; DO ; [stmts]
| (start = FOR / stmt: FOR . ...) ; var ; EQUALS ; expr ; COMMA ; expr ; (COMMA ; expr)? ; DO ; [stmts]
| (start = FUNCTION / stmt: FUNCTION . ...) ; function_name; [args ; stmts]
| (start = FUNCTION / atom: FUNCTION . ...) ; [args ; stmts]
  {
    Expected_end {
      start = ($startloc(start), $endloc(start));
      token = (token, $startloc(token), $endloc(token))
    }
  }

(* We handle local function specially, to capture both loc and func. *)
| loc = LOCAL; func = FUNCTION; var; [args ; stmts]
  {
    Expected_end {
      start = ($startloc(loc), $endloc(func));
      token = (token, $startloc(token), $endloc(token))
    }
  }

(* A standalone name in a statement context *)
| (/ stmt: . call) ; x = [simple_expr]
  partial {
    if not (is_same_line $endloc(x) token $startloc(token)) then
      Some (Standalone_name_call $endloc(x))
    else
      None
  }

| (/ stmt: . sep_list1(COMMA,name) ...) ; [name]
  { Standalone_name (token, $startloc(token), $endloc(token)) }

| (/ stmt: . sep_list1(COMMA,name) ...) ; [sep_list1(COMMA,name)]
  { Standalone_names (token, $startloc(token), $endloc(token)) }

(* Fallback parse error for when we expected a statement. *)
| [_ / stmts: ... . ...]
  partial {
    match token with
    | END _ -> Some (Unexpected_end (token, $startloc(token), $endloc(token)))
    | EOF _ -> None
    | _ -> Some (Expected_statement (token, $startloc(token), $endloc(token)))
  }

(* Fallback parse error for function arguments. *)
| [_? / ... . args ...]
  { Expected_function_args (token, $startloc(token), $endloc(token)) }

(* Fallback parse error for when we expected an expression. *)
| [/ ... . expr ...] | [/ ... . expr_pow ...] | [/ ... . sep_list1(COMMA,expr) ...]
  { Expected_expression (token, $startloc(token), $endloc(token)) }

(* Fallback parse error for when we expected a variable name. *)
| [/ ... . var ...] | [/ ... . name ...] | [_ / ... . function_name ...]
  { Expected_var (token, $startloc(token), $endloc(token)) }
