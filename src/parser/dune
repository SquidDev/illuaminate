(library
 (name illuaminateParser)
 (public_name illuaminate.parser)
 (synopsis "Provides an interface for parsing Lua code")
 (libraries menhirLib illuaminate.core)
 (preprocess
  (pps ppx_deriving.std)))

(menhir
 (modules grammar)
 (flags (--table)))

(rule
 (target "messages.ml")
 (deps
  (:grammar grammar.mly)
  (:messages messages.txt))
 (action
  (with-stdout-to
   %{target}
   (run menhir --compile-errors %{messages} %{grammar}))))

;; Check message file is complete, and do this as part of tests.

(rule
 (target messages_complete.txt)
 (deps grammar.mly)
 (action
  (with-stdout-to
   %{target}
   (run menhir --list-errors %{deps}))))

(rule
 (alias check-messages)
 (deps
  (:grammar grammar.mly)
  (:complete messages_complete.txt)
  (:main messages.txt))
 (action
  (run menhir --compare-errors %{complete} --compare-errors %{main}
    %{grammar})))

(alias
 (name runtest)
 (deps
  (alias check-messages)))

;; Provide rules for generating the .conflict and .automaton file

(rule
 (targets "grammar.conflicts" "grammar.automaton")
 (deps "grammar.mly")
 (mode promote)
 (action
  (run menhir --table --explain --dump %{deps})))

(ocamllex
 (modules lexer))
