name: CI

on: [ push, pull_request ]

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use OCaml
      uses: ocaml/setup-ocaml@v3
      with:
        ocaml-compiler: "5.3.0"

    - name: Install dependencies
      run: opam install . --deps-only --with-test

    - name: Test
      run: opam exec -- dune runtest

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: Windows
          uses: windows-latest
          ocaml:
            ocaml-compiler: "5.3.0"
            opam-depext: false
          input-file: illuaminate.exe
          output-file: illuaminate-windows-x86_64.exe
          dune-flags:

        - name: Linux
          uses: ubuntu-latest
          # We don't use flambda as that ends up much buliker than without.
          ocaml:
            ocaml-compiler: ocaml-variants.5.3.0+options,ocaml-option-static
          input-file: illuaminate
          output-file: illuaminate-linux-x86_64
          dune-flags: --workspace dune-workspace.release

        - name: macOS
          uses: macos-latest
          ocaml:
            ocaml-compiler: "5.3.0"
          input-file: illuaminate
          output-file: illuaminate-macos-x86_64
          dune-flags:

    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.uses }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # This is required to make the static/musl build work. I *believe*, OCaml
    # finds the glibc libzstd during ./configure, and then looks for a musl
    # version when compiling. Not 100% sure, as I've not been able to reproduce
    # this failure locally.
    - name: Remove libzstd
      run: sudo apt remove libzstd-dev --yes
      if: "matrix.name == 'Linux'"

    - name: Use OCaml
      uses: ocaml/setup-ocaml@v3
      with: ${{ matrix.ocaml }}

    - name: Install dependencies
      run: opam install . --deps-only

    - name: Build
      run: |
        opam exec -- dune subst
        opam exec -- dune build ${{ matrix.dune-flags }} -p illuaminate @install
        opam exec -- dune install --prefix=_install

    # We move our executable into a folder layout that matches the website (e.g.
    # bin/${version}/illuaminate-${suffix}). This is a bit cumbersome, but
    # easier to do it now rather when unpacking the artifact.
    - name: Package
      shell: bash
      run: |
        OUT_DIR="out/bin/$(git describe --always --abbrev=7)"
        mkdir -p "$OUT_DIR"
        cp _install/bin/${{ matrix.input-file }} "$OUT_DIR/${{ matrix.output-file }}"

    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output-file }}
        path: ./out
        if-no-files-found: error
        retention-days: 1

    - name: Upload website
      uses: actions/upload-artifact@v4
      with:
        name: Website
        path: _install/etc/illuaminate/web/
        if-no-files-found: error
        retention-days: 1
      if: "matrix.name == 'Linux'"
