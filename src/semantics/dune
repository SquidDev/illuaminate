(library
 (name illuaminateSemantics)
 (public_name illuaminate.semantics)
 (synopsis "Some basic semantic analysis for Illuaminate.")
 (libraries containers containers.data illuaminate.core illuaminate.config
   illuaminate.data fpath menhirLib omd re logs))

(menhir
 (modules type_grammar)
 (flags
  (--table --strict)))

(rule
 (target "type_messages.ml")
 (deps
  (:grammar type_grammar.mly)
  (:messages type_messages.txt))
 (action
  (with-stdout-to
   %{target}
   (run menhir --compile-errors %{messages} %{grammar}))))

;; Check message file is complete, and do this as part of tests.

(rule
 (target type_messages_complete.txt)
 (deps type_grammar.mly)
 (action
  (with-stdout-to
   %{target}
   (run menhir --list-errors %{deps}))))

(rule
 (alias check-messages)
 (deps
  (:grammar type_grammar.mly)
  (:complete type_messages_complete.txt)
  (:main type_messages.txt))
 (action
  (run menhir --compare-errors %{complete} --compare-errors %{main}
    %{grammar})))

(alias
 (name runtest)
 (deps
  (alias check-messages)))

;; Provide rules for generating the .conflict and .automaton file

(rule
 (targets "type_grammar.conflicts" "type_grammar.automaton")
 (deps "type_grammar.mly")
 (mode promote)
 (action
  (run menhir --table --explain --dump %{deps})))

(ocamllex
 (modules type_lexer))

(ocamllex
 (modules string_format))
